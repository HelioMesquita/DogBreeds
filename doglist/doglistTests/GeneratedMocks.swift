// MARK: - Mocks generated from file: doglist/Scenes/DogBreedsList/DogBreedsListInteractor.swift at 2019-05-25 17:26:57 +0000

//
//  DogBreedListInteractor.swift
//  doglist
//
//  Created by Hélio Mesquita on 25/05/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import doglist

import UIKit


 class MockDogBreedsListBusinessLogic: DogBreedsListBusinessLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = DogBreedsListBusinessLogic
    
     typealias Stubbing = __StubbingProxy_DogBreedsListBusinessLogic
     typealias Verification = __VerificationProxy_DogBreedsListBusinessLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: DogBreedsListBusinessLogic?

     func enableDefaultImplementation(_ stub: DogBreedsListBusinessLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     var numberOfRows: Int {
        get {
            return cuckoo_manager.getter("numberOfRows",
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.numberOfRows)
        }
        
    }
    

    

    
    
    
     func cellForRow(at index: Int) -> String {
        
    return cuckoo_manager.call("cellForRow(at: Int) -> String",
            parameters: (index),
            escapingParameters: (index),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.cellForRow(at: index))
        
    }
    
    
    
     func didSelect(at index: Int)  {
        
    return cuckoo_manager.call("didSelect(at: Int)",
            parameters: (index),
            escapingParameters: (index),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.didSelect(at: index))
        
    }
    

	 struct __StubbingProxy_DogBreedsListBusinessLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var numberOfRows: Cuckoo.ProtocolToBeStubbedReadOnlyProperty<MockDogBreedsListBusinessLogic, Int> {
	        return .init(manager: cuckoo_manager, name: "numberOfRows")
	    }
	    
	    
	    func cellForRow<M1: Cuckoo.Matchable>(at index: M1) -> Cuckoo.ProtocolStubFunction<(Int), String> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockDogBreedsListBusinessLogic.self, method: "cellForRow(at: Int) -> String", parameterMatchers: matchers))
	    }
	    
	    func didSelect<M1: Cuckoo.Matchable>(at index: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(Int)> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockDogBreedsListBusinessLogic.self, method: "didSelect(at: Int)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_DogBreedsListBusinessLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var numberOfRows: Cuckoo.VerifyReadOnlyProperty<Int> {
	        return .init(manager: cuckoo_manager, name: "numberOfRows", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func cellForRow<M1: Cuckoo.Matchable>(at index: M1) -> Cuckoo.__DoNotUse<(Int), String> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return cuckoo_manager.verify("cellForRow(at: Int) -> String", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func didSelect<M1: Cuckoo.Matchable>(at index: M1) -> Cuckoo.__DoNotUse<(Int), Void> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return cuckoo_manager.verify("didSelect(at: Int)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class DogBreedsListBusinessLogicStub: DogBreedsListBusinessLogic {
    
    
     var numberOfRows: Int {
        get {
            return DefaultValueRegistry.defaultValue(for: (Int).self)
        }
        
    }
    

    

    
     func cellForRow(at index: Int) -> String  {
        return DefaultValueRegistry.defaultValue(for: (String).self)
    }
    
     func didSelect(at index: Int)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}



 class MockDogBreedsListDataStore: DogBreedsListDataStore, Cuckoo.ProtocolMock {
    
     typealias MocksType = DogBreedsListDataStore
    
     typealias Stubbing = __StubbingProxy_DogBreedsListDataStore
     typealias Verification = __VerificationProxy_DogBreedsListDataStore

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: DogBreedsListDataStore?

     func enableDefaultImplementation(_ stub: DogBreedsListDataStore) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     var session: Login.Session? {
        get {
            return cuckoo_manager.getter("session",
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.session)
        }
        
        set {
            cuckoo_manager.setter("session",
                value: newValue,
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.session = newValue)
        }
        
    }
    

    

    

	 struct __StubbingProxy_DogBreedsListDataStore: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var session: Cuckoo.ProtocolToBeStubbedOptionalProperty<MockDogBreedsListDataStore, Login.Session> {
	        return .init(manager: cuckoo_manager, name: "session")
	    }
	    
	    
	}

	 struct __VerificationProxy_DogBreedsListDataStore: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var session: Cuckoo.VerifyOptionalProperty<Login.Session> {
	        return .init(manager: cuckoo_manager, name: "session", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	}
}

 class DogBreedsListDataStoreStub: DogBreedsListDataStore {
    
    
     var session: Login.Session? {
        get {
            return DefaultValueRegistry.defaultValue(for: (Login.Session?).self)
        }
        
        set { }
        
    }
    

    

    
}



 class MockDogBreedsListInteractor: DogBreedsListInteractor, Cuckoo.ClassMock {
    
     typealias MocksType = DogBreedsListInteractor
    
     typealias Stubbing = __StubbingProxy_DogBreedsListInteractor
     typealias Verification = __VerificationProxy_DogBreedsListInteractor

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: DogBreedsListInteractor?

     func enableDefaultImplementation(_ stub: DogBreedsListInteractor) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var numberOfRows: Int {
        get {
            return cuckoo_manager.getter("numberOfRows",
                superclassCall:
                    
                    super.numberOfRows
                    ,
                defaultCall: __defaultImplStub!.numberOfRows)
        }
        
    }
    
    
    
     override var session: Login.Session? {
        get {
            return cuckoo_manager.getter("session",
                superclassCall:
                    
                    super.session
                    ,
                defaultCall: __defaultImplStub!.session)
        }
        
        set {
            cuckoo_manager.setter("session",
                value: newValue,
                superclassCall:
                    
                    super.session = newValue
                    ,
                defaultCall: __defaultImplStub!.session = newValue)
        }
        
    }
    
    
    
     override var presenter: DogBreedsListPresentationLogic? {
        get {
            return cuckoo_manager.getter("presenter",
                superclassCall:
                    
                    super.presenter
                    ,
                defaultCall: __defaultImplStub!.presenter)
        }
        
        set {
            cuckoo_manager.setter("presenter",
                value: newValue,
                superclassCall:
                    
                    super.presenter = newValue
                    ,
                defaultCall: __defaultImplStub!.presenter = newValue)
        }
        
    }
    

    

    
    
    
     override func cellForRow(at index: Int) -> String {
        
    return cuckoo_manager.call("cellForRow(at: Int) -> String",
            parameters: (index),
            escapingParameters: (index),
            superclassCall:
                
                super.cellForRow(at: index)
                ,
            defaultCall: __defaultImplStub!.cellForRow(at: index))
        
    }
    
    
    
     override func didSelect(at index: Int)  {
        
    return cuckoo_manager.call("didSelect(at: Int)",
            parameters: (index),
            escapingParameters: (index),
            superclassCall:
                
                super.didSelect(at: index)
                ,
            defaultCall: __defaultImplStub!.didSelect(at: index))
        
    }
    

	 struct __StubbingProxy_DogBreedsListInteractor: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var numberOfRows: Cuckoo.ClassToBeStubbedReadOnlyProperty<MockDogBreedsListInteractor, Int> {
	        return .init(manager: cuckoo_manager, name: "numberOfRows")
	    }
	    
	    
	    var session: Cuckoo.ClassToBeStubbedOptionalProperty<MockDogBreedsListInteractor, Login.Session> {
	        return .init(manager: cuckoo_manager, name: "session")
	    }
	    
	    
	    var presenter: Cuckoo.ClassToBeStubbedOptionalProperty<MockDogBreedsListInteractor, DogBreedsListPresentationLogic> {
	        return .init(manager: cuckoo_manager, name: "presenter")
	    }
	    
	    
	    func cellForRow<M1: Cuckoo.Matchable>(at index: M1) -> Cuckoo.ClassStubFunction<(Int), String> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockDogBreedsListInteractor.self, method: "cellForRow(at: Int) -> String", parameterMatchers: matchers))
	    }
	    
	    func didSelect<M1: Cuckoo.Matchable>(at index: M1) -> Cuckoo.ClassStubNoReturnFunction<(Int)> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockDogBreedsListInteractor.self, method: "didSelect(at: Int)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_DogBreedsListInteractor: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var numberOfRows: Cuckoo.VerifyReadOnlyProperty<Int> {
	        return .init(manager: cuckoo_manager, name: "numberOfRows", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var session: Cuckoo.VerifyOptionalProperty<Login.Session> {
	        return .init(manager: cuckoo_manager, name: "session", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var presenter: Cuckoo.VerifyOptionalProperty<DogBreedsListPresentationLogic> {
	        return .init(manager: cuckoo_manager, name: "presenter", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func cellForRow<M1: Cuckoo.Matchable>(at index: M1) -> Cuckoo.__DoNotUse<(Int), String> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return cuckoo_manager.verify("cellForRow(at: Int) -> String", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func didSelect<M1: Cuckoo.Matchable>(at index: M1) -> Cuckoo.__DoNotUse<(Int), Void> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return cuckoo_manager.verify("didSelect(at: Int)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class DogBreedsListInteractorStub: DogBreedsListInteractor {
    
    
     override var numberOfRows: Int {
        get {
            return DefaultValueRegistry.defaultValue(for: (Int).self)
        }
        
    }
    
    
     override var session: Login.Session? {
        get {
            return DefaultValueRegistry.defaultValue(for: (Login.Session?).self)
        }
        
        set { }
        
    }
    
    
     override var presenter: DogBreedsListPresentationLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (DogBreedsListPresentationLogic?).self)
        }
        
        set { }
        
    }
    

    

    
     override func cellForRow(at index: Int) -> String  {
        return DefaultValueRegistry.defaultValue(for: (String).self)
    }
    
     override func didSelect(at index: Int)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}


// MARK: - Mocks generated from file: doglist/Scenes/DogBreedsList/DogBreedsListPresenter.swift at 2019-05-25 17:26:57 +0000

//
//  DogBreedsListPresenter.swift
//  doglist
//
//  Created by Hélio Mesquita on 25/05/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import doglist

import UIKit


 class MockDogBreedsListPresentationLogic: DogBreedsListPresentationLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = DogBreedsListPresentationLogic
    
     typealias Stubbing = __StubbingProxy_DogBreedsListPresentationLogic
     typealias Verification = __VerificationProxy_DogBreedsListPresentationLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: DogBreedsListPresentationLogic?

     func enableDefaultImplementation(_ stub: DogBreedsListPresentationLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    
    
    
     func presentDogPhotoList()  {
        
    return cuckoo_manager.call("presentDogPhotoList()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.presentDogPhotoList())
        
    }
    

	 struct __StubbingProxy_DogBreedsListPresentationLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func presentDogPhotoList() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockDogBreedsListPresentationLogic.self, method: "presentDogPhotoList()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_DogBreedsListPresentationLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func presentDogPhotoList() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentDogPhotoList()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class DogBreedsListPresentationLogicStub: DogBreedsListPresentationLogic {
    

    

    
     func presentDogPhotoList()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}



 class MockDogBreedsListPresenter: DogBreedsListPresenter, Cuckoo.ClassMock {
    
     typealias MocksType = DogBreedsListPresenter
    
     typealias Stubbing = __StubbingProxy_DogBreedsListPresenter
     typealias Verification = __VerificationProxy_DogBreedsListPresenter

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: DogBreedsListPresenter?

     func enableDefaultImplementation(_ stub: DogBreedsListPresenter) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var viewController: DogBreedsListDisplayLogic? {
        get {
            return cuckoo_manager.getter("viewController",
                superclassCall:
                    
                    super.viewController
                    ,
                defaultCall: __defaultImplStub!.viewController)
        }
        
        set {
            cuckoo_manager.setter("viewController",
                value: newValue,
                superclassCall:
                    
                    super.viewController = newValue
                    ,
                defaultCall: __defaultImplStub!.viewController = newValue)
        }
        
    }
    

    

    
    
    
     override func presentDogPhotoList()  {
        
    return cuckoo_manager.call("presentDogPhotoList()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.presentDogPhotoList()
                ,
            defaultCall: __defaultImplStub!.presentDogPhotoList())
        
    }
    

	 struct __StubbingProxy_DogBreedsListPresenter: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var viewController: Cuckoo.ClassToBeStubbedOptionalProperty<MockDogBreedsListPresenter, DogBreedsListDisplayLogic> {
	        return .init(manager: cuckoo_manager, name: "viewController")
	    }
	    
	    
	    func presentDogPhotoList() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockDogBreedsListPresenter.self, method: "presentDogPhotoList()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_DogBreedsListPresenter: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var viewController: Cuckoo.VerifyOptionalProperty<DogBreedsListDisplayLogic> {
	        return .init(manager: cuckoo_manager, name: "viewController", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func presentDogPhotoList() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentDogPhotoList()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class DogBreedsListPresenterStub: DogBreedsListPresenter {
    
    
     override var viewController: DogBreedsListDisplayLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (DogBreedsListDisplayLogic?).self)
        }
        
        set { }
        
    }
    

    

    
     override func presentDogPhotoList()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}


// MARK: - Mocks generated from file: doglist/Scenes/DogBreedsList/DogBreedsListViewController.swift at 2019-05-25 17:26:57 +0000

//
//  DogBreedListViewController.swift
//  doglist
//
//  Created by Hélio Mesquita on 25/05/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import doglist

import UIKit


 class MockDogBreedsListDisplayLogic: DogBreedsListDisplayLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = DogBreedsListDisplayLogic
    
     typealias Stubbing = __StubbingProxy_DogBreedsListDisplayLogic
     typealias Verification = __VerificationProxy_DogBreedsListDisplayLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: DogBreedsListDisplayLogic?

     func enableDefaultImplementation(_ stub: DogBreedsListDisplayLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    
    
    
     func showDogPhotoList()  {
        
    return cuckoo_manager.call("showDogPhotoList()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.showDogPhotoList())
        
    }
    

	 struct __StubbingProxy_DogBreedsListDisplayLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func showDogPhotoList() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockDogBreedsListDisplayLogic.self, method: "showDogPhotoList()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_DogBreedsListDisplayLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func showDogPhotoList() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("showDogPhotoList()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class DogBreedsListDisplayLogicStub: DogBreedsListDisplayLogic {
    

    

    
     func showDogPhotoList()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}



 class MockDogBreedsListViewController: DogBreedsListViewController, Cuckoo.ClassMock {
    
     typealias MocksType = DogBreedsListViewController
    
     typealias Stubbing = __StubbingProxy_DogBreedsListViewController
     typealias Verification = __VerificationProxy_DogBreedsListViewController

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: DogBreedsListViewController?

     func enableDefaultImplementation(_ stub: DogBreedsListViewController) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var interactor: DogBreedsListBusinessLogic? {
        get {
            return cuckoo_manager.getter("interactor",
                superclassCall:
                    
                    super.interactor
                    ,
                defaultCall: __defaultImplStub!.interactor)
        }
        
        set {
            cuckoo_manager.setter("interactor",
                value: newValue,
                superclassCall:
                    
                    super.interactor = newValue
                    ,
                defaultCall: __defaultImplStub!.interactor = newValue)
        }
        
    }
    
    
    
     override var router: (DogBreedsListRoutingLogic & DogBreedsListDataPassing)? {
        get {
            return cuckoo_manager.getter("router",
                superclassCall:
                    
                    super.router
                    ,
                defaultCall: __defaultImplStub!.router)
        }
        
        set {
            cuckoo_manager.setter("router",
                value: newValue,
                superclassCall:
                    
                    super.router = newValue
                    ,
                defaultCall: __defaultImplStub!.router = newValue)
        }
        
    }
    
    
    
     override var tableView: UITableView! {
        get {
            return cuckoo_manager.getter("tableView",
                superclassCall:
                    
                    super.tableView
                    ,
                defaultCall: __defaultImplStub!.tableView)
        }
        
        set {
            cuckoo_manager.setter("tableView",
                value: newValue,
                superclassCall:
                    
                    super.tableView = newValue
                    ,
                defaultCall: __defaultImplStub!.tableView = newValue)
        }
        
    }
    

    

    
    
    
     override func viewDidLoad()  {
        
    return cuckoo_manager.call("viewDidLoad()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.viewDidLoad()
                ,
            defaultCall: __defaultImplStub!.viewDidLoad())
        
    }
    

	 struct __StubbingProxy_DogBreedsListViewController: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var interactor: Cuckoo.ClassToBeStubbedOptionalProperty<MockDogBreedsListViewController, DogBreedsListBusinessLogic> {
	        return .init(manager: cuckoo_manager, name: "interactor")
	    }
	    
	    
	    var router: Cuckoo.ClassToBeStubbedOptionalProperty<MockDogBreedsListViewController, (DogBreedsListRoutingLogic & DogBreedsListDataPassing)> {
	        return .init(manager: cuckoo_manager, name: "router")
	    }
	    
	    
	    var tableView: Cuckoo.ClassToBeStubbedOptionalProperty<MockDogBreedsListViewController, UITableView> {
	        return .init(manager: cuckoo_manager, name: "tableView")
	    }
	    
	    
	    func viewDidLoad() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockDogBreedsListViewController.self, method: "viewDidLoad()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_DogBreedsListViewController: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var interactor: Cuckoo.VerifyOptionalProperty<DogBreedsListBusinessLogic> {
	        return .init(manager: cuckoo_manager, name: "interactor", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var router: Cuckoo.VerifyOptionalProperty<(DogBreedsListRoutingLogic & DogBreedsListDataPassing)> {
	        return .init(manager: cuckoo_manager, name: "router", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var tableView: Cuckoo.VerifyOptionalProperty<UITableView> {
	        return .init(manager: cuckoo_manager, name: "tableView", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func viewDidLoad() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("viewDidLoad()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class DogBreedsListViewControllerStub: DogBreedsListViewController {
    
    
     override var interactor: DogBreedsListBusinessLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (DogBreedsListBusinessLogic?).self)
        }
        
        set { }
        
    }
    
    
     override var router: (DogBreedsListRoutingLogic & DogBreedsListDataPassing)? {
        get {
            return DefaultValueRegistry.defaultValue(for: ((DogBreedsListRoutingLogic & DogBreedsListDataPassing)?).self)
        }
        
        set { }
        
    }
    
    
     override var tableView: UITableView! {
        get {
            return DefaultValueRegistry.defaultValue(for: (UITableView?).self)
        }
        
        set { }
        
    }
    

    

    
     override func viewDidLoad()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}


// MARK: - Mocks generated from file: doglist/Scenes/DogPhotoList/DogPhotoListInteractor.swift at 2019-05-25 17:26:57 +0000

//
//  DogPhotoListInteractor.swift
//  doglist
//
//  Created by Hélio Mesquita on 25/05/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import doglist

import UIKit


 class MockDogPhotoListBusinessLogic: DogPhotoListBusinessLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = DogPhotoListBusinessLogic
    
     typealias Stubbing = __StubbingProxy_DogPhotoListBusinessLogic
     typealias Verification = __VerificationProxy_DogPhotoListBusinessLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: DogPhotoListBusinessLogic?

     func enableDefaultImplementation(_ stub: DogPhotoListBusinessLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     var numberOfRows: Int {
        get {
            return cuckoo_manager.getter("numberOfRows",
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.numberOfRows)
        }
        
    }
    

    

    
    
    
     func cellForRow(at index: Int) -> String {
        
    return cuckoo_manager.call("cellForRow(at: Int) -> String",
            parameters: (index),
            escapingParameters: (index),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.cellForRow(at: index))
        
    }
    
    
    
     func load()  {
        
    return cuckoo_manager.call("load()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.load())
        
    }
    

	 struct __StubbingProxy_DogPhotoListBusinessLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var numberOfRows: Cuckoo.ProtocolToBeStubbedReadOnlyProperty<MockDogPhotoListBusinessLogic, Int> {
	        return .init(manager: cuckoo_manager, name: "numberOfRows")
	    }
	    
	    
	    func cellForRow<M1: Cuckoo.Matchable>(at index: M1) -> Cuckoo.ProtocolStubFunction<(Int), String> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListBusinessLogic.self, method: "cellForRow(at: Int) -> String", parameterMatchers: matchers))
	    }
	    
	    func load() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListBusinessLogic.self, method: "load()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_DogPhotoListBusinessLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var numberOfRows: Cuckoo.VerifyReadOnlyProperty<Int> {
	        return .init(manager: cuckoo_manager, name: "numberOfRows", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func cellForRow<M1: Cuckoo.Matchable>(at index: M1) -> Cuckoo.__DoNotUse<(Int), String> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return cuckoo_manager.verify("cellForRow(at: Int) -> String", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func load() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("load()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class DogPhotoListBusinessLogicStub: DogPhotoListBusinessLogic {
    
    
     var numberOfRows: Int {
        get {
            return DefaultValueRegistry.defaultValue(for: (Int).self)
        }
        
    }
    

    

    
     func cellForRow(at index: Int) -> String  {
        return DefaultValueRegistry.defaultValue(for: (String).self)
    }
    
     func load()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}



 class MockDogPhotoListDataStore: DogPhotoListDataStore, Cuckoo.ProtocolMock {
    
     typealias MocksType = DogPhotoListDataStore
    
     typealias Stubbing = __StubbingProxy_DogPhotoListDataStore
     typealias Verification = __VerificationProxy_DogPhotoListDataStore

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: DogPhotoListDataStore?

     func enableDefaultImplementation(_ stub: DogPhotoListDataStore) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     var session: Login.Session? {
        get {
            return cuckoo_manager.getter("session",
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.session)
        }
        
        set {
            cuckoo_manager.setter("session",
                value: newValue,
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.session = newValue)
        }
        
    }
    

    

    

	 struct __StubbingProxy_DogPhotoListDataStore: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var session: Cuckoo.ProtocolToBeStubbedOptionalProperty<MockDogPhotoListDataStore, Login.Session> {
	        return .init(manager: cuckoo_manager, name: "session")
	    }
	    
	    
	}

	 struct __VerificationProxy_DogPhotoListDataStore: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var session: Cuckoo.VerifyOptionalProperty<Login.Session> {
	        return .init(manager: cuckoo_manager, name: "session", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	}
}

 class DogPhotoListDataStoreStub: DogPhotoListDataStore {
    
    
     var session: Login.Session? {
        get {
            return DefaultValueRegistry.defaultValue(for: (Login.Session?).self)
        }
        
        set { }
        
    }
    

    

    
}



 class MockDogPhotoListInteractor: DogPhotoListInteractor, Cuckoo.ClassMock {
    
     typealias MocksType = DogPhotoListInteractor
    
     typealias Stubbing = __StubbingProxy_DogPhotoListInteractor
     typealias Verification = __VerificationProxy_DogPhotoListInteractor

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: DogPhotoListInteractor?

     func enableDefaultImplementation(_ stub: DogPhotoListInteractor) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var session: Login.Session? {
        get {
            return cuckoo_manager.getter("session",
                superclassCall:
                    
                    super.session
                    ,
                defaultCall: __defaultImplStub!.session)
        }
        
        set {
            cuckoo_manager.setter("session",
                value: newValue,
                superclassCall:
                    
                    super.session = newValue
                    ,
                defaultCall: __defaultImplStub!.session = newValue)
        }
        
    }
    
    
    
     override var presenter: DogPhotoListPresentationLogic? {
        get {
            return cuckoo_manager.getter("presenter",
                superclassCall:
                    
                    super.presenter
                    ,
                defaultCall: __defaultImplStub!.presenter)
        }
        
        set {
            cuckoo_manager.setter("presenter",
                value: newValue,
                superclassCall:
                    
                    super.presenter = newValue
                    ,
                defaultCall: __defaultImplStub!.presenter = newValue)
        }
        
    }
    
    
    
     override var response: DogPhotoList.Response? {
        get {
            return cuckoo_manager.getter("response",
                superclassCall:
                    
                    super.response
                    ,
                defaultCall: __defaultImplStub!.response)
        }
        
        set {
            cuckoo_manager.setter("response",
                value: newValue,
                superclassCall:
                    
                    super.response = newValue
                    ,
                defaultCall: __defaultImplStub!.response = newValue)
        }
        
    }
    
    
    
     override var numberOfRows: Int {
        get {
            return cuckoo_manager.getter("numberOfRows",
                superclassCall:
                    
                    super.numberOfRows
                    ,
                defaultCall: __defaultImplStub!.numberOfRows)
        }
        
    }
    

    

    
    
    
     override func cellForRow(at index: Int) -> String {
        
    return cuckoo_manager.call("cellForRow(at: Int) -> String",
            parameters: (index),
            escapingParameters: (index),
            superclassCall:
                
                super.cellForRow(at: index)
                ,
            defaultCall: __defaultImplStub!.cellForRow(at: index))
        
    }
    
    
    
     override func load()  {
        
    return cuckoo_manager.call("load()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.load()
                ,
            defaultCall: __defaultImplStub!.load())
        
    }
    
    
    
     override func handleSuccess(_ response: DogPhotoList.Response)  {
        
    return cuckoo_manager.call("handleSuccess(_: DogPhotoList.Response)",
            parameters: (response),
            escapingParameters: (response),
            superclassCall:
                
                super.handleSuccess(response)
                ,
            defaultCall: __defaultImplStub!.handleSuccess(response))
        
    }
    
    
    
     override func handleFailure(_ error: Error)  {
        
    return cuckoo_manager.call("handleFailure(_: Error)",
            parameters: (error),
            escapingParameters: (error),
            superclassCall:
                
                super.handleFailure(error)
                ,
            defaultCall: __defaultImplStub!.handleFailure(error))
        
    }
    

	 struct __StubbingProxy_DogPhotoListInteractor: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var session: Cuckoo.ClassToBeStubbedOptionalProperty<MockDogPhotoListInteractor, Login.Session> {
	        return .init(manager: cuckoo_manager, name: "session")
	    }
	    
	    
	    var presenter: Cuckoo.ClassToBeStubbedOptionalProperty<MockDogPhotoListInteractor, DogPhotoListPresentationLogic> {
	        return .init(manager: cuckoo_manager, name: "presenter")
	    }
	    
	    
	    var response: Cuckoo.ClassToBeStubbedOptionalProperty<MockDogPhotoListInteractor, DogPhotoList.Response> {
	        return .init(manager: cuckoo_manager, name: "response")
	    }
	    
	    
	    var numberOfRows: Cuckoo.ClassToBeStubbedReadOnlyProperty<MockDogPhotoListInteractor, Int> {
	        return .init(manager: cuckoo_manager, name: "numberOfRows")
	    }
	    
	    
	    func cellForRow<M1: Cuckoo.Matchable>(at index: M1) -> Cuckoo.ClassStubFunction<(Int), String> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListInteractor.self, method: "cellForRow(at: Int) -> String", parameterMatchers: matchers))
	    }
	    
	    func load() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListInteractor.self, method: "load()", parameterMatchers: matchers))
	    }
	    
	    func handleSuccess<M1: Cuckoo.Matchable>(_ response: M1) -> Cuckoo.ClassStubNoReturnFunction<(DogPhotoList.Response)> where M1.MatchedType == DogPhotoList.Response {
	        let matchers: [Cuckoo.ParameterMatcher<(DogPhotoList.Response)>] = [wrap(matchable: response) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListInteractor.self, method: "handleSuccess(_: DogPhotoList.Response)", parameterMatchers: matchers))
	    }
	    
	    func handleFailure<M1: Cuckoo.Matchable>(_ error: M1) -> Cuckoo.ClassStubNoReturnFunction<(Error)> where M1.MatchedType == Error {
	        let matchers: [Cuckoo.ParameterMatcher<(Error)>] = [wrap(matchable: error) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListInteractor.self, method: "handleFailure(_: Error)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_DogPhotoListInteractor: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var session: Cuckoo.VerifyOptionalProperty<Login.Session> {
	        return .init(manager: cuckoo_manager, name: "session", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var presenter: Cuckoo.VerifyOptionalProperty<DogPhotoListPresentationLogic> {
	        return .init(manager: cuckoo_manager, name: "presenter", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var response: Cuckoo.VerifyOptionalProperty<DogPhotoList.Response> {
	        return .init(manager: cuckoo_manager, name: "response", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var numberOfRows: Cuckoo.VerifyReadOnlyProperty<Int> {
	        return .init(manager: cuckoo_manager, name: "numberOfRows", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func cellForRow<M1: Cuckoo.Matchable>(at index: M1) -> Cuckoo.__DoNotUse<(Int), String> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return cuckoo_manager.verify("cellForRow(at: Int) -> String", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func load() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("load()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func handleSuccess<M1: Cuckoo.Matchable>(_ response: M1) -> Cuckoo.__DoNotUse<(DogPhotoList.Response), Void> where M1.MatchedType == DogPhotoList.Response {
	        let matchers: [Cuckoo.ParameterMatcher<(DogPhotoList.Response)>] = [wrap(matchable: response) { $0 }]
	        return cuckoo_manager.verify("handleSuccess(_: DogPhotoList.Response)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func handleFailure<M1: Cuckoo.Matchable>(_ error: M1) -> Cuckoo.__DoNotUse<(Error), Void> where M1.MatchedType == Error {
	        let matchers: [Cuckoo.ParameterMatcher<(Error)>] = [wrap(matchable: error) { $0 }]
	        return cuckoo_manager.verify("handleFailure(_: Error)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class DogPhotoListInteractorStub: DogPhotoListInteractor {
    
    
     override var session: Login.Session? {
        get {
            return DefaultValueRegistry.defaultValue(for: (Login.Session?).self)
        }
        
        set { }
        
    }
    
    
     override var presenter: DogPhotoListPresentationLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (DogPhotoListPresentationLogic?).self)
        }
        
        set { }
        
    }
    
    
     override var response: DogPhotoList.Response? {
        get {
            return DefaultValueRegistry.defaultValue(for: (DogPhotoList.Response?).self)
        }
        
        set { }
        
    }
    
    
     override var numberOfRows: Int {
        get {
            return DefaultValueRegistry.defaultValue(for: (Int).self)
        }
        
    }
    

    

    
     override func cellForRow(at index: Int) -> String  {
        return DefaultValueRegistry.defaultValue(for: (String).self)
    }
    
     override func load()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func handleSuccess(_ response: DogPhotoList.Response)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func handleFailure(_ error: Error)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}


// MARK: - Mocks generated from file: doglist/Scenes/DogPhotoList/DogPhotoListPresenter.swift at 2019-05-25 17:26:57 +0000

//
//  DogPhotoListPresenter.swift
//  doglist
//
//  Created by Hélio Mesquita on 25/05/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import doglist

import UIKit


 class MockDogPhotoListPresentationLogic: DogPhotoListPresentationLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = DogPhotoListPresentationLogic
    
     typealias Stubbing = __StubbingProxy_DogPhotoListPresentationLogic
     typealias Verification = __VerificationProxy_DogPhotoListPresentationLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: DogPhotoListPresentationLogic?

     func enableDefaultImplementation(_ stub: DogPhotoListPresentationLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    
    
    
     func presentTitle(_ text: String?)  {
        
    return cuckoo_manager.call("presentTitle(_: String?)",
            parameters: (text),
            escapingParameters: (text),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.presentTitle(text))
        
    }
    
    
    
     func reloadCollection()  {
        
    return cuckoo_manager.call("reloadCollection()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.reloadCollection())
        
    }
    
    
    
     func presentRequestFailureAlert()  {
        
    return cuckoo_manager.call("presentRequestFailureAlert()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.presentRequestFailureAlert())
        
    }
    

	 struct __StubbingProxy_DogPhotoListPresentationLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func presentTitle<M1: Cuckoo.OptionalMatchable>(_ text: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(String?)> where M1.OptionalMatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String?)>] = [wrap(matchable: text) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListPresentationLogic.self, method: "presentTitle(_: String?)", parameterMatchers: matchers))
	    }
	    
	    func reloadCollection() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListPresentationLogic.self, method: "reloadCollection()", parameterMatchers: matchers))
	    }
	    
	    func presentRequestFailureAlert() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListPresentationLogic.self, method: "presentRequestFailureAlert()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_DogPhotoListPresentationLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func presentTitle<M1: Cuckoo.OptionalMatchable>(_ text: M1) -> Cuckoo.__DoNotUse<(String?), Void> where M1.OptionalMatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String?)>] = [wrap(matchable: text) { $0 }]
	        return cuckoo_manager.verify("presentTitle(_: String?)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func reloadCollection() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("reloadCollection()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentRequestFailureAlert() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentRequestFailureAlert()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class DogPhotoListPresentationLogicStub: DogPhotoListPresentationLogic {
    

    

    
     func presentTitle(_ text: String?)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func reloadCollection()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func presentRequestFailureAlert()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}



 class MockDogPhotoListPresenter: DogPhotoListPresenter, Cuckoo.ClassMock {
    
     typealias MocksType = DogPhotoListPresenter
    
     typealias Stubbing = __StubbingProxy_DogPhotoListPresenter
     typealias Verification = __VerificationProxy_DogPhotoListPresenter

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: DogPhotoListPresenter?

     func enableDefaultImplementation(_ stub: DogPhotoListPresenter) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var viewController: DogPhotoListDisplayLogic? {
        get {
            return cuckoo_manager.getter("viewController",
                superclassCall:
                    
                    super.viewController
                    ,
                defaultCall: __defaultImplStub!.viewController)
        }
        
        set {
            cuckoo_manager.setter("viewController",
                value: newValue,
                superclassCall:
                    
                    super.viewController = newValue
                    ,
                defaultCall: __defaultImplStub!.viewController = newValue)
        }
        
    }
    

    

    
    
    
     override func presentTitle(_ text: String?)  {
        
    return cuckoo_manager.call("presentTitle(_: String?)",
            parameters: (text),
            escapingParameters: (text),
            superclassCall:
                
                super.presentTitle(text)
                ,
            defaultCall: __defaultImplStub!.presentTitle(text))
        
    }
    
    
    
     override func reloadCollection()  {
        
    return cuckoo_manager.call("reloadCollection()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.reloadCollection()
                ,
            defaultCall: __defaultImplStub!.reloadCollection())
        
    }
    
    
    
     override func presentRequestFailureAlert()  {
        
    return cuckoo_manager.call("presentRequestFailureAlert()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.presentRequestFailureAlert()
                ,
            defaultCall: __defaultImplStub!.presentRequestFailureAlert())
        
    }
    

	 struct __StubbingProxy_DogPhotoListPresenter: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var viewController: Cuckoo.ClassToBeStubbedOptionalProperty<MockDogPhotoListPresenter, DogPhotoListDisplayLogic> {
	        return .init(manager: cuckoo_manager, name: "viewController")
	    }
	    
	    
	    func presentTitle<M1: Cuckoo.OptionalMatchable>(_ text: M1) -> Cuckoo.ClassStubNoReturnFunction<(String?)> where M1.OptionalMatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String?)>] = [wrap(matchable: text) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListPresenter.self, method: "presentTitle(_: String?)", parameterMatchers: matchers))
	    }
	    
	    func reloadCollection() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListPresenter.self, method: "reloadCollection()", parameterMatchers: matchers))
	    }
	    
	    func presentRequestFailureAlert() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListPresenter.self, method: "presentRequestFailureAlert()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_DogPhotoListPresenter: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var viewController: Cuckoo.VerifyOptionalProperty<DogPhotoListDisplayLogic> {
	        return .init(manager: cuckoo_manager, name: "viewController", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func presentTitle<M1: Cuckoo.OptionalMatchable>(_ text: M1) -> Cuckoo.__DoNotUse<(String?), Void> where M1.OptionalMatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String?)>] = [wrap(matchable: text) { $0 }]
	        return cuckoo_manager.verify("presentTitle(_: String?)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func reloadCollection() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("reloadCollection()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentRequestFailureAlert() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentRequestFailureAlert()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class DogPhotoListPresenterStub: DogPhotoListPresenter {
    
    
     override var viewController: DogPhotoListDisplayLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (DogPhotoListDisplayLogic?).self)
        }
        
        set { }
        
    }
    

    

    
     override func presentTitle(_ text: String?)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func reloadCollection()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func presentRequestFailureAlert()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}


// MARK: - Mocks generated from file: doglist/Scenes/DogPhotoList/DogPhotoListViewController.swift at 2019-05-25 17:26:57 +0000

//
//  DogPhotoListViewController.swift
//  doglist
//
//  Created by Hélio Mesquita on 25/05/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import doglist

import SDWebImage
import UIKit


 class MockDogPhotoListDisplayLogic: DogPhotoListDisplayLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = DogPhotoListDisplayLogic
    
     typealias Stubbing = __StubbingProxy_DogPhotoListDisplayLogic
     typealias Verification = __VerificationProxy_DogPhotoListDisplayLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: DogPhotoListDisplayLogic?

     func enableDefaultImplementation(_ stub: DogPhotoListDisplayLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    
    
    
     func showAlert(message: String)  {
        
    return cuckoo_manager.call("showAlert(message: String)",
            parameters: (message),
            escapingParameters: (message),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.showAlert(message: message))
        
    }
    
    
    
     func showTitle(_ text: String)  {
        
    return cuckoo_manager.call("showTitle(_: String)",
            parameters: (text),
            escapingParameters: (text),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.showTitle(text))
        
    }
    
    
    
     func reloadCollection()  {
        
    return cuckoo_manager.call("reloadCollection()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.reloadCollection())
        
    }
    

	 struct __StubbingProxy_DogPhotoListDisplayLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func showAlert<M1: Cuckoo.Matchable>(message: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(String)> where M1.MatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String)>] = [wrap(matchable: message) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListDisplayLogic.self, method: "showAlert(message: String)", parameterMatchers: matchers))
	    }
	    
	    func showTitle<M1: Cuckoo.Matchable>(_ text: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(String)> where M1.MatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String)>] = [wrap(matchable: text) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListDisplayLogic.self, method: "showTitle(_: String)", parameterMatchers: matchers))
	    }
	    
	    func reloadCollection() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListDisplayLogic.self, method: "reloadCollection()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_DogPhotoListDisplayLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func showAlert<M1: Cuckoo.Matchable>(message: M1) -> Cuckoo.__DoNotUse<(String), Void> where M1.MatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String)>] = [wrap(matchable: message) { $0 }]
	        return cuckoo_manager.verify("showAlert(message: String)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func showTitle<M1: Cuckoo.Matchable>(_ text: M1) -> Cuckoo.__DoNotUse<(String), Void> where M1.MatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String)>] = [wrap(matchable: text) { $0 }]
	        return cuckoo_manager.verify("showTitle(_: String)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func reloadCollection() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("reloadCollection()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class DogPhotoListDisplayLogicStub: DogPhotoListDisplayLogic {
    

    

    
     func showAlert(message: String)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func showTitle(_ text: String)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func reloadCollection()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}



 class MockDogPhotoListViewController: DogPhotoListViewController, Cuckoo.ClassMock {
    
     typealias MocksType = DogPhotoListViewController
    
     typealias Stubbing = __StubbingProxy_DogPhotoListViewController
     typealias Verification = __VerificationProxy_DogPhotoListViewController

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: DogPhotoListViewController?

     func enableDefaultImplementation(_ stub: DogPhotoListViewController) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var collectionView: UICollectionView! {
        get {
            return cuckoo_manager.getter("collectionView",
                superclassCall:
                    
                    super.collectionView
                    ,
                defaultCall: __defaultImplStub!.collectionView)
        }
        
        set {
            cuckoo_manager.setter("collectionView",
                value: newValue,
                superclassCall:
                    
                    super.collectionView = newValue
                    ,
                defaultCall: __defaultImplStub!.collectionView = newValue)
        }
        
    }
    
    
    
     override var interactor: DogPhotoListBusinessLogic? {
        get {
            return cuckoo_manager.getter("interactor",
                superclassCall:
                    
                    super.interactor
                    ,
                defaultCall: __defaultImplStub!.interactor)
        }
        
        set {
            cuckoo_manager.setter("interactor",
                value: newValue,
                superclassCall:
                    
                    super.interactor = newValue
                    ,
                defaultCall: __defaultImplStub!.interactor = newValue)
        }
        
    }
    
    
    
     override var router: (DogPhotoListRoutingLogic & DogPhotoListDataPassing)? {
        get {
            return cuckoo_manager.getter("router",
                superclassCall:
                    
                    super.router
                    ,
                defaultCall: __defaultImplStub!.router)
        }
        
        set {
            cuckoo_manager.setter("router",
                value: newValue,
                superclassCall:
                    
                    super.router = newValue
                    ,
                defaultCall: __defaultImplStub!.router = newValue)
        }
        
    }
    

    

    
    
    
     override func viewDidLoad()  {
        
    return cuckoo_manager.call("viewDidLoad()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.viewDidLoad()
                ,
            defaultCall: __defaultImplStub!.viewDidLoad())
        
    }
    
    
    
     override func configureFlowLayout()  {
        
    return cuckoo_manager.call("configureFlowLayout()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.configureFlowLayout()
                ,
            defaultCall: __defaultImplStub!.configureFlowLayout())
        
    }
    
    
    
     override func viewWillAppear(_ animated: Bool)  {
        
    return cuckoo_manager.call("viewWillAppear(_: Bool)",
            parameters: (animated),
            escapingParameters: (animated),
            superclassCall:
                
                super.viewWillAppear(animated)
                ,
            defaultCall: __defaultImplStub!.viewWillAppear(animated))
        
    }
    
    
    
     override func chooseBreed(_ sender: Any)  {
        
    return cuckoo_manager.call("chooseBreed(_: Any)",
            parameters: (sender),
            escapingParameters: (sender),
            superclassCall:
                
                super.chooseBreed(sender)
                ,
            defaultCall: __defaultImplStub!.chooseBreed(sender))
        
    }
    

	 struct __StubbingProxy_DogPhotoListViewController: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var collectionView: Cuckoo.ClassToBeStubbedOptionalProperty<MockDogPhotoListViewController, UICollectionView> {
	        return .init(manager: cuckoo_manager, name: "collectionView")
	    }
	    
	    
	    var interactor: Cuckoo.ClassToBeStubbedOptionalProperty<MockDogPhotoListViewController, DogPhotoListBusinessLogic> {
	        return .init(manager: cuckoo_manager, name: "interactor")
	    }
	    
	    
	    var router: Cuckoo.ClassToBeStubbedOptionalProperty<MockDogPhotoListViewController, (DogPhotoListRoutingLogic & DogPhotoListDataPassing)> {
	        return .init(manager: cuckoo_manager, name: "router")
	    }
	    
	    
	    func viewDidLoad() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListViewController.self, method: "viewDidLoad()", parameterMatchers: matchers))
	    }
	    
	    func configureFlowLayout() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListViewController.self, method: "configureFlowLayout()", parameterMatchers: matchers))
	    }
	    
	    func viewWillAppear<M1: Cuckoo.Matchable>(_ animated: M1) -> Cuckoo.ClassStubNoReturnFunction<(Bool)> where M1.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool)>] = [wrap(matchable: animated) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListViewController.self, method: "viewWillAppear(_: Bool)", parameterMatchers: matchers))
	    }
	    
	    func chooseBreed<M1: Cuckoo.Matchable>(_ sender: M1) -> Cuckoo.ClassStubNoReturnFunction<(Any)> where M1.MatchedType == Any {
	        let matchers: [Cuckoo.ParameterMatcher<(Any)>] = [wrap(matchable: sender) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListViewController.self, method: "chooseBreed(_: Any)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_DogPhotoListViewController: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var collectionView: Cuckoo.VerifyOptionalProperty<UICollectionView> {
	        return .init(manager: cuckoo_manager, name: "collectionView", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var interactor: Cuckoo.VerifyOptionalProperty<DogPhotoListBusinessLogic> {
	        return .init(manager: cuckoo_manager, name: "interactor", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var router: Cuckoo.VerifyOptionalProperty<(DogPhotoListRoutingLogic & DogPhotoListDataPassing)> {
	        return .init(manager: cuckoo_manager, name: "router", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func viewDidLoad() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("viewDidLoad()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func configureFlowLayout() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("configureFlowLayout()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func viewWillAppear<M1: Cuckoo.Matchable>(_ animated: M1) -> Cuckoo.__DoNotUse<(Bool), Void> where M1.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool)>] = [wrap(matchable: animated) { $0 }]
	        return cuckoo_manager.verify("viewWillAppear(_: Bool)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func chooseBreed<M1: Cuckoo.Matchable>(_ sender: M1) -> Cuckoo.__DoNotUse<(Any), Void> where M1.MatchedType == Any {
	        let matchers: [Cuckoo.ParameterMatcher<(Any)>] = [wrap(matchable: sender) { $0 }]
	        return cuckoo_manager.verify("chooseBreed(_: Any)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class DogPhotoListViewControllerStub: DogPhotoListViewController {
    
    
     override var collectionView: UICollectionView! {
        get {
            return DefaultValueRegistry.defaultValue(for: (UICollectionView?).self)
        }
        
        set { }
        
    }
    
    
     override var interactor: DogPhotoListBusinessLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (DogPhotoListBusinessLogic?).self)
        }
        
        set { }
        
    }
    
    
     override var router: (DogPhotoListRoutingLogic & DogPhotoListDataPassing)? {
        get {
            return DefaultValueRegistry.defaultValue(for: ((DogPhotoListRoutingLogic & DogPhotoListDataPassing)?).self)
        }
        
        set { }
        
    }
    

    

    
     override func viewDidLoad()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func configureFlowLayout()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func viewWillAppear(_ animated: Bool)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func chooseBreed(_ sender: Any)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}


// MARK: - Mocks generated from file: doglist/Scenes/DogPhotoList/DogPhotoListWorker.swift at 2019-05-25 17:26:57 +0000

//
//  DogPhotoListWorker.swift
//  doglist
//
//  Created by Hélio Mesquita on 25/05/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import doglist

import PromiseKit
import UIKit


 class MockDogPhotoListWorker: DogPhotoListWorker, Cuckoo.ClassMock {
    
     typealias MocksType = DogPhotoListWorker
    
     typealias Stubbing = __StubbingProxy_DogPhotoListWorker
     typealias Verification = __VerificationProxy_DogPhotoListWorker

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: DogPhotoListWorker?

     func enableDefaultImplementation(_ stub: DogPhotoListWorker) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    
    
    
     override func getPhotoList(session: Login.Session) -> Promise<DogPhotoList.Response> {
        
    return cuckoo_manager.call("getPhotoList(session: Login.Session) -> Promise<DogPhotoList.Response>",
            parameters: (session),
            escapingParameters: (session),
            superclassCall:
                
                super.getPhotoList(session: session)
                ,
            defaultCall: __defaultImplStub!.getPhotoList(session: session))
        
    }
    

	 struct __StubbingProxy_DogPhotoListWorker: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func getPhotoList<M1: Cuckoo.Matchable>(session: M1) -> Cuckoo.ClassStubFunction<(Login.Session), Promise<DogPhotoList.Response>> where M1.MatchedType == Login.Session {
	        let matchers: [Cuckoo.ParameterMatcher<(Login.Session)>] = [wrap(matchable: session) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockDogPhotoListWorker.self, method: "getPhotoList(session: Login.Session) -> Promise<DogPhotoList.Response>", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_DogPhotoListWorker: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func getPhotoList<M1: Cuckoo.Matchable>(session: M1) -> Cuckoo.__DoNotUse<(Login.Session), Promise<DogPhotoList.Response>> where M1.MatchedType == Login.Session {
	        let matchers: [Cuckoo.ParameterMatcher<(Login.Session)>] = [wrap(matchable: session) { $0 }]
	        return cuckoo_manager.verify("getPhotoList(session: Login.Session) -> Promise<DogPhotoList.Response>", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class DogPhotoListWorkerStub: DogPhotoListWorker {
    

    

    
     override func getPhotoList(session: Login.Session) -> Promise<DogPhotoList.Response>  {
        return DefaultValueRegistry.defaultValue(for: (Promise<DogPhotoList.Response>).self)
    }
    
}


// MARK: - Mocks generated from file: doglist/Scenes/Login/LoginInteractor.swift at 2019-05-25 17:26:57 +0000

//
//  LoginInteractor.swift
//  doglist
//
//  Created by Hélio Mesquita on 24/05/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import doglist

import UIKit


 class MockLoginBusinessLogic: LoginBusinessLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = LoginBusinessLogic
    
     typealias Stubbing = __StubbingProxy_LoginBusinessLogic
     typealias Verification = __VerificationProxy_LoginBusinessLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: LoginBusinessLogic?

     func enableDefaultImplementation(_ stub: LoginBusinessLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    
    
    
     func validateEmail(_ text: String?)  {
        
    return cuckoo_manager.call("validateEmail(_: String?)",
            parameters: (text),
            escapingParameters: (text),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.validateEmail(text))
        
    }
    

	 struct __StubbingProxy_LoginBusinessLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func validateEmail<M1: Cuckoo.OptionalMatchable>(_ text: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(String?)> where M1.OptionalMatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String?)>] = [wrap(matchable: text) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginBusinessLogic.self, method: "validateEmail(_: String?)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_LoginBusinessLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func validateEmail<M1: Cuckoo.OptionalMatchable>(_ text: M1) -> Cuckoo.__DoNotUse<(String?), Void> where M1.OptionalMatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String?)>] = [wrap(matchable: text) { $0 }]
	        return cuckoo_manager.verify("validateEmail(_: String?)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class LoginBusinessLogicStub: LoginBusinessLogic {
    

    

    
     func validateEmail(_ text: String?)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}



 class MockLoginDataStore: LoginDataStore, Cuckoo.ProtocolMock {
    
     typealias MocksType = LoginDataStore
    
     typealias Stubbing = __StubbingProxy_LoginDataStore
     typealias Verification = __VerificationProxy_LoginDataStore

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: LoginDataStore?

     func enableDefaultImplementation(_ stub: LoginDataStore) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     var session: Login.Session? {
        get {
            return cuckoo_manager.getter("session",
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.session)
        }
        
        set {
            cuckoo_manager.setter("session",
                value: newValue,
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.session = newValue)
        }
        
    }
    

    

    

	 struct __StubbingProxy_LoginDataStore: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var session: Cuckoo.ProtocolToBeStubbedOptionalProperty<MockLoginDataStore, Login.Session> {
	        return .init(manager: cuckoo_manager, name: "session")
	    }
	    
	    
	}

	 struct __VerificationProxy_LoginDataStore: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var session: Cuckoo.VerifyOptionalProperty<Login.Session> {
	        return .init(manager: cuckoo_manager, name: "session", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	}
}

 class LoginDataStoreStub: LoginDataStore {
    
    
     var session: Login.Session? {
        get {
            return DefaultValueRegistry.defaultValue(for: (Login.Session?).self)
        }
        
        set { }
        
    }
    

    

    
}



 class MockLoginInteractor: LoginInteractor, Cuckoo.ClassMock {
    
     typealias MocksType = LoginInteractor
    
     typealias Stubbing = __StubbingProxy_LoginInteractor
     typealias Verification = __VerificationProxy_LoginInteractor

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: LoginInteractor?

     func enableDefaultImplementation(_ stub: LoginInteractor) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var session: Login.Session? {
        get {
            return cuckoo_manager.getter("session",
                superclassCall:
                    
                    super.session
                    ,
                defaultCall: __defaultImplStub!.session)
        }
        
        set {
            cuckoo_manager.setter("session",
                value: newValue,
                superclassCall:
                    
                    super.session = newValue
                    ,
                defaultCall: __defaultImplStub!.session = newValue)
        }
        
    }
    
    
    
     override var presenter: LoginPresentationLogic? {
        get {
            return cuckoo_manager.getter("presenter",
                superclassCall:
                    
                    super.presenter
                    ,
                defaultCall: __defaultImplStub!.presenter)
        }
        
        set {
            cuckoo_manager.setter("presenter",
                value: newValue,
                superclassCall:
                    
                    super.presenter = newValue
                    ,
                defaultCall: __defaultImplStub!.presenter = newValue)
        }
        
    }
    

    

    
    
    
     override func validateEmail(_ text: String?)  {
        
    return cuckoo_manager.call("validateEmail(_: String?)",
            parameters: (text),
            escapingParameters: (text),
            superclassCall:
                
                super.validateEmail(text)
                ,
            defaultCall: __defaultImplStub!.validateEmail(text))
        
    }
    
    
    
     override func performLogin(_ validatedEmail: String)  {
        
    return cuckoo_manager.call("performLogin(_: String)",
            parameters: (validatedEmail),
            escapingParameters: (validatedEmail),
            superclassCall:
                
                super.performLogin(validatedEmail)
                ,
            defaultCall: __defaultImplStub!.performLogin(validatedEmail))
        
    }
    
    
    
     override func handleSuccess(_ response: Login.Response)  {
        
    return cuckoo_manager.call("handleSuccess(_: Login.Response)",
            parameters: (response),
            escapingParameters: (response),
            superclassCall:
                
                super.handleSuccess(response)
                ,
            defaultCall: __defaultImplStub!.handleSuccess(response))
        
    }
    
    
    
     override func handleFailure(_ error: Error)  {
        
    return cuckoo_manager.call("handleFailure(_: Error)",
            parameters: (error),
            escapingParameters: (error),
            superclassCall:
                
                super.handleFailure(error)
                ,
            defaultCall: __defaultImplStub!.handleFailure(error))
        
    }
    

	 struct __StubbingProxy_LoginInteractor: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var session: Cuckoo.ClassToBeStubbedOptionalProperty<MockLoginInteractor, Login.Session> {
	        return .init(manager: cuckoo_manager, name: "session")
	    }
	    
	    
	    var presenter: Cuckoo.ClassToBeStubbedOptionalProperty<MockLoginInteractor, LoginPresentationLogic> {
	        return .init(manager: cuckoo_manager, name: "presenter")
	    }
	    
	    
	    func validateEmail<M1: Cuckoo.OptionalMatchable>(_ text: M1) -> Cuckoo.ClassStubNoReturnFunction<(String?)> where M1.OptionalMatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String?)>] = [wrap(matchable: text) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginInteractor.self, method: "validateEmail(_: String?)", parameterMatchers: matchers))
	    }
	    
	    func performLogin<M1: Cuckoo.Matchable>(_ validatedEmail: M1) -> Cuckoo.ClassStubNoReturnFunction<(String)> where M1.MatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String)>] = [wrap(matchable: validatedEmail) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginInteractor.self, method: "performLogin(_: String)", parameterMatchers: matchers))
	    }
	    
	    func handleSuccess<M1: Cuckoo.Matchable>(_ response: M1) -> Cuckoo.ClassStubNoReturnFunction<(Login.Response)> where M1.MatchedType == Login.Response {
	        let matchers: [Cuckoo.ParameterMatcher<(Login.Response)>] = [wrap(matchable: response) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginInteractor.self, method: "handleSuccess(_: Login.Response)", parameterMatchers: matchers))
	    }
	    
	    func handleFailure<M1: Cuckoo.Matchable>(_ error: M1) -> Cuckoo.ClassStubNoReturnFunction<(Error)> where M1.MatchedType == Error {
	        let matchers: [Cuckoo.ParameterMatcher<(Error)>] = [wrap(matchable: error) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginInteractor.self, method: "handleFailure(_: Error)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_LoginInteractor: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var session: Cuckoo.VerifyOptionalProperty<Login.Session> {
	        return .init(manager: cuckoo_manager, name: "session", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var presenter: Cuckoo.VerifyOptionalProperty<LoginPresentationLogic> {
	        return .init(manager: cuckoo_manager, name: "presenter", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func validateEmail<M1: Cuckoo.OptionalMatchable>(_ text: M1) -> Cuckoo.__DoNotUse<(String?), Void> where M1.OptionalMatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String?)>] = [wrap(matchable: text) { $0 }]
	        return cuckoo_manager.verify("validateEmail(_: String?)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func performLogin<M1: Cuckoo.Matchable>(_ validatedEmail: M1) -> Cuckoo.__DoNotUse<(String), Void> where M1.MatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String)>] = [wrap(matchable: validatedEmail) { $0 }]
	        return cuckoo_manager.verify("performLogin(_: String)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func handleSuccess<M1: Cuckoo.Matchable>(_ response: M1) -> Cuckoo.__DoNotUse<(Login.Response), Void> where M1.MatchedType == Login.Response {
	        let matchers: [Cuckoo.ParameterMatcher<(Login.Response)>] = [wrap(matchable: response) { $0 }]
	        return cuckoo_manager.verify("handleSuccess(_: Login.Response)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func handleFailure<M1: Cuckoo.Matchable>(_ error: M1) -> Cuckoo.__DoNotUse<(Error), Void> where M1.MatchedType == Error {
	        let matchers: [Cuckoo.ParameterMatcher<(Error)>] = [wrap(matchable: error) { $0 }]
	        return cuckoo_manager.verify("handleFailure(_: Error)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class LoginInteractorStub: LoginInteractor {
    
    
     override var session: Login.Session? {
        get {
            return DefaultValueRegistry.defaultValue(for: (Login.Session?).self)
        }
        
        set { }
        
    }
    
    
     override var presenter: LoginPresentationLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (LoginPresentationLogic?).self)
        }
        
        set { }
        
    }
    

    

    
     override func validateEmail(_ text: String?)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func performLogin(_ validatedEmail: String)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func handleSuccess(_ response: Login.Response)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func handleFailure(_ error: Error)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}


// MARK: - Mocks generated from file: doglist/Scenes/Login/LoginPresenter.swift at 2019-05-25 17:26:57 +0000

//
//  LoginPresenter.swift
//  doglist
//
//  Created by Hélio Mesquita on 24/05/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import doglist

import UIKit


 class MockLoginPresentationLogic: LoginPresentationLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = LoginPresentationLogic
    
     typealias Stubbing = __StubbingProxy_LoginPresentationLogic
     typealias Verification = __VerificationProxy_LoginPresentationLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: LoginPresentationLogic?

     func enableDefaultImplementation(_ stub: LoginPresentationLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    
    
    
     func presentTitle()  {
        
    return cuckoo_manager.call("presentTitle()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.presentTitle())
        
    }
    
    
    
     func presentSubtitle()  {
        
    return cuckoo_manager.call("presentSubtitle()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.presentSubtitle())
        
    }
    
    
    
     func presentInvalidEmailAlert()  {
        
    return cuckoo_manager.call("presentInvalidEmailAlert()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.presentInvalidEmailAlert())
        
    }
    
    
    
     func presentRequestFailureAlert()  {
        
    return cuckoo_manager.call("presentRequestFailureAlert()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.presentRequestFailureAlert())
        
    }
    
    
    
     func presentButtonTitle()  {
        
    return cuckoo_manager.call("presentButtonTitle()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.presentButtonTitle())
        
    }
    
    
    
     func presentPhotoList()  {
        
    return cuckoo_manager.call("presentPhotoList()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.presentPhotoList())
        
    }
    

	 struct __StubbingProxy_LoginPresentationLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func presentTitle() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginPresentationLogic.self, method: "presentTitle()", parameterMatchers: matchers))
	    }
	    
	    func presentSubtitle() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginPresentationLogic.self, method: "presentSubtitle()", parameterMatchers: matchers))
	    }
	    
	    func presentInvalidEmailAlert() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginPresentationLogic.self, method: "presentInvalidEmailAlert()", parameterMatchers: matchers))
	    }
	    
	    func presentRequestFailureAlert() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginPresentationLogic.self, method: "presentRequestFailureAlert()", parameterMatchers: matchers))
	    }
	    
	    func presentButtonTitle() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginPresentationLogic.self, method: "presentButtonTitle()", parameterMatchers: matchers))
	    }
	    
	    func presentPhotoList() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginPresentationLogic.self, method: "presentPhotoList()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_LoginPresentationLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func presentTitle() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentTitle()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentSubtitle() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentSubtitle()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentInvalidEmailAlert() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentInvalidEmailAlert()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentRequestFailureAlert() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentRequestFailureAlert()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentButtonTitle() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentButtonTitle()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentPhotoList() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentPhotoList()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class LoginPresentationLogicStub: LoginPresentationLogic {
    

    

    
     func presentTitle()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func presentSubtitle()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func presentInvalidEmailAlert()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func presentRequestFailureAlert()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func presentButtonTitle()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func presentPhotoList()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}



 class MockLoginPresenter: LoginPresenter, Cuckoo.ClassMock {
    
     typealias MocksType = LoginPresenter
    
     typealias Stubbing = __StubbingProxy_LoginPresenter
     typealias Verification = __VerificationProxy_LoginPresenter

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: LoginPresenter?

     func enableDefaultImplementation(_ stub: LoginPresenter) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var viewController: LoginDisplayLogic? {
        get {
            return cuckoo_manager.getter("viewController",
                superclassCall:
                    
                    super.viewController
                    ,
                defaultCall: __defaultImplStub!.viewController)
        }
        
        set {
            cuckoo_manager.setter("viewController",
                value: newValue,
                superclassCall:
                    
                    super.viewController = newValue
                    ,
                defaultCall: __defaultImplStub!.viewController = newValue)
        }
        
    }
    

    

    
    
    
     override func presentInvalidEmailAlert()  {
        
    return cuckoo_manager.call("presentInvalidEmailAlert()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.presentInvalidEmailAlert()
                ,
            defaultCall: __defaultImplStub!.presentInvalidEmailAlert())
        
    }
    
    
    
     override func presentTitle()  {
        
    return cuckoo_manager.call("presentTitle()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.presentTitle()
                ,
            defaultCall: __defaultImplStub!.presentTitle())
        
    }
    
    
    
     override func presentSubtitle()  {
        
    return cuckoo_manager.call("presentSubtitle()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.presentSubtitle()
                ,
            defaultCall: __defaultImplStub!.presentSubtitle())
        
    }
    
    
    
     override func presentButtonTitle()  {
        
    return cuckoo_manager.call("presentButtonTitle()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.presentButtonTitle()
                ,
            defaultCall: __defaultImplStub!.presentButtonTitle())
        
    }
    
    
    
     override func presentRequestFailureAlert()  {
        
    return cuckoo_manager.call("presentRequestFailureAlert()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.presentRequestFailureAlert()
                ,
            defaultCall: __defaultImplStub!.presentRequestFailureAlert())
        
    }
    
    
    
     override func presentPhotoList()  {
        
    return cuckoo_manager.call("presentPhotoList()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.presentPhotoList()
                ,
            defaultCall: __defaultImplStub!.presentPhotoList())
        
    }
    

	 struct __StubbingProxy_LoginPresenter: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var viewController: Cuckoo.ClassToBeStubbedOptionalProperty<MockLoginPresenter, LoginDisplayLogic> {
	        return .init(manager: cuckoo_manager, name: "viewController")
	    }
	    
	    
	    func presentInvalidEmailAlert() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginPresenter.self, method: "presentInvalidEmailAlert()", parameterMatchers: matchers))
	    }
	    
	    func presentTitle() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginPresenter.self, method: "presentTitle()", parameterMatchers: matchers))
	    }
	    
	    func presentSubtitle() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginPresenter.self, method: "presentSubtitle()", parameterMatchers: matchers))
	    }
	    
	    func presentButtonTitle() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginPresenter.self, method: "presentButtonTitle()", parameterMatchers: matchers))
	    }
	    
	    func presentRequestFailureAlert() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginPresenter.self, method: "presentRequestFailureAlert()", parameterMatchers: matchers))
	    }
	    
	    func presentPhotoList() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginPresenter.self, method: "presentPhotoList()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_LoginPresenter: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var viewController: Cuckoo.VerifyOptionalProperty<LoginDisplayLogic> {
	        return .init(manager: cuckoo_manager, name: "viewController", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func presentInvalidEmailAlert() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentInvalidEmailAlert()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentTitle() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentTitle()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentSubtitle() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentSubtitle()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentButtonTitle() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentButtonTitle()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentRequestFailureAlert() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentRequestFailureAlert()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentPhotoList() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentPhotoList()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class LoginPresenterStub: LoginPresenter {
    
    
     override var viewController: LoginDisplayLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (LoginDisplayLogic?).self)
        }
        
        set { }
        
    }
    

    

    
     override func presentInvalidEmailAlert()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func presentTitle()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func presentSubtitle()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func presentButtonTitle()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func presentRequestFailureAlert()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func presentPhotoList()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}


// MARK: - Mocks generated from file: doglist/Scenes/Login/LoginViewController.swift at 2019-05-25 17:26:57 +0000

//
//  LoginViewController.swift
//  doglist
//
//  Created by Hélio Mesquita on 24/05/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import doglist

import UIKit


 class MockLoginDisplayLogic: LoginDisplayLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = LoginDisplayLogic
    
     typealias Stubbing = __StubbingProxy_LoginDisplayLogic
     typealias Verification = __VerificationProxy_LoginDisplayLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: LoginDisplayLogic?

     func enableDefaultImplementation(_ stub: LoginDisplayLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    
    
    
     func showAlert(message: String)  {
        
    return cuckoo_manager.call("showAlert(message: String)",
            parameters: (message),
            escapingParameters: (message),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.showAlert(message: message))
        
    }
    
    
    
     func showTitle(text: String)  {
        
    return cuckoo_manager.call("showTitle(text: String)",
            parameters: (text),
            escapingParameters: (text),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.showTitle(text: text))
        
    }
    
    
    
     func showSubtitle(text: String)  {
        
    return cuckoo_manager.call("showSubtitle(text: String)",
            parameters: (text),
            escapingParameters: (text),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.showSubtitle(text: text))
        
    }
    
    
    
     func showButtonTitle(text: String)  {
        
    return cuckoo_manager.call("showButtonTitle(text: String)",
            parameters: (text),
            escapingParameters: (text),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.showButtonTitle(text: text))
        
    }
    
    
    
     func showPhotoList()  {
        
    return cuckoo_manager.call("showPhotoList()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.showPhotoList())
        
    }
    

	 struct __StubbingProxy_LoginDisplayLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func showAlert<M1: Cuckoo.Matchable>(message: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(String)> where M1.MatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String)>] = [wrap(matchable: message) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginDisplayLogic.self, method: "showAlert(message: String)", parameterMatchers: matchers))
	    }
	    
	    func showTitle<M1: Cuckoo.Matchable>(text: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(String)> where M1.MatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String)>] = [wrap(matchable: text) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginDisplayLogic.self, method: "showTitle(text: String)", parameterMatchers: matchers))
	    }
	    
	    func showSubtitle<M1: Cuckoo.Matchable>(text: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(String)> where M1.MatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String)>] = [wrap(matchable: text) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginDisplayLogic.self, method: "showSubtitle(text: String)", parameterMatchers: matchers))
	    }
	    
	    func showButtonTitle<M1: Cuckoo.Matchable>(text: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(String)> where M1.MatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String)>] = [wrap(matchable: text) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginDisplayLogic.self, method: "showButtonTitle(text: String)", parameterMatchers: matchers))
	    }
	    
	    func showPhotoList() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginDisplayLogic.self, method: "showPhotoList()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_LoginDisplayLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func showAlert<M1: Cuckoo.Matchable>(message: M1) -> Cuckoo.__DoNotUse<(String), Void> where M1.MatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String)>] = [wrap(matchable: message) { $0 }]
	        return cuckoo_manager.verify("showAlert(message: String)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func showTitle<M1: Cuckoo.Matchable>(text: M1) -> Cuckoo.__DoNotUse<(String), Void> where M1.MatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String)>] = [wrap(matchable: text) { $0 }]
	        return cuckoo_manager.verify("showTitle(text: String)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func showSubtitle<M1: Cuckoo.Matchable>(text: M1) -> Cuckoo.__DoNotUse<(String), Void> where M1.MatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String)>] = [wrap(matchable: text) { $0 }]
	        return cuckoo_manager.verify("showSubtitle(text: String)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func showButtonTitle<M1: Cuckoo.Matchable>(text: M1) -> Cuckoo.__DoNotUse<(String), Void> where M1.MatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String)>] = [wrap(matchable: text) { $0 }]
	        return cuckoo_manager.verify("showButtonTitle(text: String)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func showPhotoList() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("showPhotoList()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class LoginDisplayLogicStub: LoginDisplayLogic {
    

    

    
     func showAlert(message: String)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func showTitle(text: String)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func showSubtitle(text: String)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func showButtonTitle(text: String)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func showPhotoList()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}



 class MockLoginViewController: LoginViewController, Cuckoo.ClassMock {
    
     typealias MocksType = LoginViewController
    
     typealias Stubbing = __StubbingProxy_LoginViewController
     typealias Verification = __VerificationProxy_LoginViewController

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: LoginViewController?

     func enableDefaultImplementation(_ stub: LoginViewController) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var lblTitle: UILabel! {
        get {
            return cuckoo_manager.getter("lblTitle",
                superclassCall:
                    
                    super.lblTitle
                    ,
                defaultCall: __defaultImplStub!.lblTitle)
        }
        
        set {
            cuckoo_manager.setter("lblTitle",
                value: newValue,
                superclassCall:
                    
                    super.lblTitle = newValue
                    ,
                defaultCall: __defaultImplStub!.lblTitle = newValue)
        }
        
    }
    
    
    
     override var lblSubtitle: UILabel! {
        get {
            return cuckoo_manager.getter("lblSubtitle",
                superclassCall:
                    
                    super.lblSubtitle
                    ,
                defaultCall: __defaultImplStub!.lblSubtitle)
        }
        
        set {
            cuckoo_manager.setter("lblSubtitle",
                value: newValue,
                superclassCall:
                    
                    super.lblSubtitle = newValue
                    ,
                defaultCall: __defaultImplStub!.lblSubtitle = newValue)
        }
        
    }
    
    
    
     override var txfEmail: UITextField! {
        get {
            return cuckoo_manager.getter("txfEmail",
                superclassCall:
                    
                    super.txfEmail
                    ,
                defaultCall: __defaultImplStub!.txfEmail)
        }
        
        set {
            cuckoo_manager.setter("txfEmail",
                value: newValue,
                superclassCall:
                    
                    super.txfEmail = newValue
                    ,
                defaultCall: __defaultImplStub!.txfEmail = newValue)
        }
        
    }
    
    
    
     override var bttOut: UIButton! {
        get {
            return cuckoo_manager.getter("bttOut",
                superclassCall:
                    
                    super.bttOut
                    ,
                defaultCall: __defaultImplStub!.bttOut)
        }
        
        set {
            cuckoo_manager.setter("bttOut",
                value: newValue,
                superclassCall:
                    
                    super.bttOut = newValue
                    ,
                defaultCall: __defaultImplStub!.bttOut = newValue)
        }
        
    }
    
    
    
     override var interactor: LoginBusinessLogic? {
        get {
            return cuckoo_manager.getter("interactor",
                superclassCall:
                    
                    super.interactor
                    ,
                defaultCall: __defaultImplStub!.interactor)
        }
        
        set {
            cuckoo_manager.setter("interactor",
                value: newValue,
                superclassCall:
                    
                    super.interactor = newValue
                    ,
                defaultCall: __defaultImplStub!.interactor = newValue)
        }
        
    }
    
    
    
     override var router: (LoginRoutingLogic & LoginDataPassing)? {
        get {
            return cuckoo_manager.getter("router",
                superclassCall:
                    
                    super.router
                    ,
                defaultCall: __defaultImplStub!.router)
        }
        
        set {
            cuckoo_manager.setter("router",
                value: newValue,
                superclassCall:
                    
                    super.router = newValue
                    ,
                defaultCall: __defaultImplStub!.router = newValue)
        }
        
    }
    

    

    
    
    
     override func viewDidLoad()  {
        
    return cuckoo_manager.call("viewDidLoad()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.viewDidLoad()
                ,
            defaultCall: __defaultImplStub!.viewDidLoad())
        
    }
    
    
    
     override func continueButton(_ sender: Any)  {
        
    return cuckoo_manager.call("continueButton(_: Any)",
            parameters: (sender),
            escapingParameters: (sender),
            superclassCall:
                
                super.continueButton(sender)
                ,
            defaultCall: __defaultImplStub!.continueButton(sender))
        
    }
    

	 struct __StubbingProxy_LoginViewController: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var lblTitle: Cuckoo.ClassToBeStubbedOptionalProperty<MockLoginViewController, UILabel> {
	        return .init(manager: cuckoo_manager, name: "lblTitle")
	    }
	    
	    
	    var lblSubtitle: Cuckoo.ClassToBeStubbedOptionalProperty<MockLoginViewController, UILabel> {
	        return .init(manager: cuckoo_manager, name: "lblSubtitle")
	    }
	    
	    
	    var txfEmail: Cuckoo.ClassToBeStubbedOptionalProperty<MockLoginViewController, UITextField> {
	        return .init(manager: cuckoo_manager, name: "txfEmail")
	    }
	    
	    
	    var bttOut: Cuckoo.ClassToBeStubbedOptionalProperty<MockLoginViewController, UIButton> {
	        return .init(manager: cuckoo_manager, name: "bttOut")
	    }
	    
	    
	    var interactor: Cuckoo.ClassToBeStubbedOptionalProperty<MockLoginViewController, LoginBusinessLogic> {
	        return .init(manager: cuckoo_manager, name: "interactor")
	    }
	    
	    
	    var router: Cuckoo.ClassToBeStubbedOptionalProperty<MockLoginViewController, (LoginRoutingLogic & LoginDataPassing)> {
	        return .init(manager: cuckoo_manager, name: "router")
	    }
	    
	    
	    func viewDidLoad() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginViewController.self, method: "viewDidLoad()", parameterMatchers: matchers))
	    }
	    
	    func continueButton<M1: Cuckoo.Matchable>(_ sender: M1) -> Cuckoo.ClassStubNoReturnFunction<(Any)> where M1.MatchedType == Any {
	        let matchers: [Cuckoo.ParameterMatcher<(Any)>] = [wrap(matchable: sender) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginViewController.self, method: "continueButton(_: Any)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_LoginViewController: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var lblTitle: Cuckoo.VerifyOptionalProperty<UILabel> {
	        return .init(manager: cuckoo_manager, name: "lblTitle", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var lblSubtitle: Cuckoo.VerifyOptionalProperty<UILabel> {
	        return .init(manager: cuckoo_manager, name: "lblSubtitle", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var txfEmail: Cuckoo.VerifyOptionalProperty<UITextField> {
	        return .init(manager: cuckoo_manager, name: "txfEmail", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var bttOut: Cuckoo.VerifyOptionalProperty<UIButton> {
	        return .init(manager: cuckoo_manager, name: "bttOut", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var interactor: Cuckoo.VerifyOptionalProperty<LoginBusinessLogic> {
	        return .init(manager: cuckoo_manager, name: "interactor", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var router: Cuckoo.VerifyOptionalProperty<(LoginRoutingLogic & LoginDataPassing)> {
	        return .init(manager: cuckoo_manager, name: "router", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func viewDidLoad() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("viewDidLoad()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func continueButton<M1: Cuckoo.Matchable>(_ sender: M1) -> Cuckoo.__DoNotUse<(Any), Void> where M1.MatchedType == Any {
	        let matchers: [Cuckoo.ParameterMatcher<(Any)>] = [wrap(matchable: sender) { $0 }]
	        return cuckoo_manager.verify("continueButton(_: Any)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class LoginViewControllerStub: LoginViewController {
    
    
     override var lblTitle: UILabel! {
        get {
            return DefaultValueRegistry.defaultValue(for: (UILabel?).self)
        }
        
        set { }
        
    }
    
    
     override var lblSubtitle: UILabel! {
        get {
            return DefaultValueRegistry.defaultValue(for: (UILabel?).self)
        }
        
        set { }
        
    }
    
    
     override var txfEmail: UITextField! {
        get {
            return DefaultValueRegistry.defaultValue(for: (UITextField?).self)
        }
        
        set { }
        
    }
    
    
     override var bttOut: UIButton! {
        get {
            return DefaultValueRegistry.defaultValue(for: (UIButton?).self)
        }
        
        set { }
        
    }
    
    
     override var interactor: LoginBusinessLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (LoginBusinessLogic?).self)
        }
        
        set { }
        
    }
    
    
     override var router: (LoginRoutingLogic & LoginDataPassing)? {
        get {
            return DefaultValueRegistry.defaultValue(for: ((LoginRoutingLogic & LoginDataPassing)?).self)
        }
        
        set { }
        
    }
    

    

    
     override func viewDidLoad()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func continueButton(_ sender: Any)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}


// MARK: - Mocks generated from file: doglist/Scenes/Login/LoginWorker.swift at 2019-05-25 17:26:57 +0000

//
//  LoginWorker.swift
//  doglist
//
//  Created by Hélio Mesquita on 24/05/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import doglist

import PromiseKit
import UIKit


 class MockLoginWorker: LoginWorker, Cuckoo.ClassMock {
    
     typealias MocksType = LoginWorker
    
     typealias Stubbing = __StubbingProxy_LoginWorker
     typealias Verification = __VerificationProxy_LoginWorker

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: LoginWorker?

     func enableDefaultImplementation(_ stub: LoginWorker) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    
    
    
     override func performLogin(validatedEmail: String) -> Promise<Login.Response> {
        
    return cuckoo_manager.call("performLogin(validatedEmail: String) -> Promise<Login.Response>",
            parameters: (validatedEmail),
            escapingParameters: (validatedEmail),
            superclassCall:
                
                super.performLogin(validatedEmail: validatedEmail)
                ,
            defaultCall: __defaultImplStub!.performLogin(validatedEmail: validatedEmail))
        
    }
    

	 struct __StubbingProxy_LoginWorker: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func performLogin<M1: Cuckoo.Matchable>(validatedEmail: M1) -> Cuckoo.ClassStubFunction<(String), Promise<Login.Response>> where M1.MatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String)>] = [wrap(matchable: validatedEmail) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockLoginWorker.self, method: "performLogin(validatedEmail: String) -> Promise<Login.Response>", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_LoginWorker: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func performLogin<M1: Cuckoo.Matchable>(validatedEmail: M1) -> Cuckoo.__DoNotUse<(String), Promise<Login.Response>> where M1.MatchedType == String {
	        let matchers: [Cuckoo.ParameterMatcher<(String)>] = [wrap(matchable: validatedEmail) { $0 }]
	        return cuckoo_manager.verify("performLogin(validatedEmail: String) -> Promise<Login.Response>", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class LoginWorkerStub: LoginWorker {
    

    

    
     override func performLogin(validatedEmail: String) -> Promise<Login.Response>  {
        return DefaultValueRegistry.defaultValue(for: (Promise<Login.Response>).self)
    }
    
}

