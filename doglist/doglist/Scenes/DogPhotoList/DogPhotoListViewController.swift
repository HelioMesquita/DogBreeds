//
//  DogPhotoListViewController.swift
//  doglist
//
//  Created by Hélio Mesquita on 25/05/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SDWebImage

protocol DogPhotoListDisplayLogic: class {
  func showTitle(_ text: String)
  func reloadCollection()
}

class DogPhotoListViewController: UIViewController {

  @IBOutlet weak var collectionView: UICollectionView!

  var interactor: DogPhotoListBusinessLogic?
  var router: (DogPhotoListRoutingLogic & DogPhotoListDataPassing)?

  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)   {
    super.init(nibName: R.storyboard.main.photoList.identifier, bundle: nibBundleOrNil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  private func setup() {
    let viewController = self
    let interactor = DogPhotoListInteractor()
    let presenter = DogPhotoListPresenter()
    let router = DogPhotoListRouter()
    viewController.interactor = interactor
    viewController.router = router
    presenter.viewController = viewController
    interactor.presenter = presenter
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  override func viewDidLoad() {
    super.viewDidLoad()
    collectionView.delegate = self
    collectionView.dataSource = self

  }

  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    interactor?.load()
  }

}

extension DogPhotoListViewController: DogPhotoListDisplayLogic {

  func showTitle(_ text: String) {
    navigationItem.title = text
  }

  func reloadCollection() {
    collectionView.reloadData()
  }

}

extension DogPhotoListViewController: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout{

  func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
    return interactor?.numberOfRows ?? 0
  }

  func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "photoCell", for: indexPath) as? DogCollectionViewCell
    let url = URL(string: interactor?.cellForRow(at: indexPath.row) ?? "")
    cell?.backgroundImageView.sd_setImage(with: url)
    return cell ?? UICollectionViewCell()
  }

  func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -> CGSize {

    let padding: CGFloat =  50
    let collectionViewSize = collectionView.frame.size.width - padding

    return CGSize(width: collectionViewSize/2, height: collectionViewSize/2)
  }

  func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
    let padding: CGFloat =  50
    let collectionViewSize = collectionView.frame.size.width - padding

    return CGSize(width: collectionViewSize/2, height: collectionViewSize/2)
  }

}
