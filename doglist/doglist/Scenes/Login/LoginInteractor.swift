//
//  LoginInteractor.swift
//  doglist
//
//  Created by Hélio Mesquita on 24/05/19.
//  Copyright (c) 2019 Hélio Mesquita. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic {
  func validateEmail(_ text: String?)
}

protocol LoginDataStore {
  var session: Login.Session? { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore {

  var session: Login.Session?
  var presenter: LoginPresentationLogic? {
    didSet {
      presenter?.presentTitle()
      presenter?.presentSubtitle()
      presenter?.presentButtonTitle()
    }
  }

  let worker: LoginWorker

  init(worker: LoginWorker = LoginWorker()) {
    self.worker = worker
  }

  func validateEmail(_ text: String?) {
    let regex: String = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}"
    let isValid = NSPredicate(format: "SELF MATCHES %@", regex).evaluate(with: text)
    if let text = text, isValid {
      performLogin(text)
    } else {
      presenter?.presentInvalidEmailAlert()
    }
  }

  func performLogin(_ validatedEmail: String) {
    worker.performLogin(validatedEmail: validatedEmail)
      .done(handleSuccess)
      .catch(handleFailure)
  }

  func handleSuccess(_ response: Login.Response) {
    self.session = Login.Session(token: response.user.token)
    presenter?.presentPhotoList()
  }

  func handleFailure(_ error: Error) {
    presenter?.presentRequestFailureAlert()
  }
  
}
