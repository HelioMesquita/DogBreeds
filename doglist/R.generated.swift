//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `breedCell`.
    static let breedCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "breedCell")
    /// Reuse identifier `photoCell`.
    static let photoCell: Rswift.ReuseIdentifier<DogCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "photoCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.dogPhoto` struct is generated, and contains static references to 2 localization keys.
    struct dogPhoto {
      /// Value: Breed %@
      static let title = Rswift.StringResource(key: "title", tableName: "DogPhoto", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ocorreu algum erro ao realizar a requisição, tente novamente
      static let request_failure = Rswift.StringResource(key: "request_failure", tableName: "DogPhoto", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Breed %@
      static func title(_ value1: String) -> String {
        return String(format: NSLocalizedString("title", tableName: "DogPhoto", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Ocorreu algum erro ao realizar a requisição, tente novamente
      static func request_failure(_: Void = ()) -> String {
        return NSLocalizedString("request_failure", tableName: "DogPhoto", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.general` struct is generated, and contains static references to 3 localization keys.
    struct general {
      /// Value: Aconteceu um erro, tente novamente
      static let someError = Rswift.StringResource(key: "someError", tableName: "general", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ok
      static let ok = Rswift.StringResource(key: "ok", tableName: "general", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tentar novamente
      static let tryAgain = Rswift.StringResource(key: "tryAgain", tableName: "general", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Aconteceu um erro, tente novamente
      static func someError(_: Void = ()) -> String {
        return NSLocalizedString("someError", tableName: "general", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ok
      static func ok(_: Void = ()) -> String {
        return NSLocalizedString("ok", tableName: "general", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Tentar novamente
      static func tryAgain(_: Void = ()) -> String {
        return NSLocalizedString("tryAgain", tableName: "general", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.login` struct is generated, and contains static references to 5 localization keys.
    struct login {
      /// Value: Bem vindo!
      static let welcome = Rswift.StringResource(key: "welcome", tableName: "Login", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Continuar
      static let `continue` = Rswift.StringResource(key: "continue", tableName: "Login", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Digite o seu e-mail para continuar
      static let digit_your_email_to_continue = Rswift.StringResource(key: "digit_your_email_to_continue", tableName: "Login", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: E-mail inválido, insira um e-mail valido para continuar
      static let invalid_email = Rswift.StringResource(key: "invalid_email", tableName: "Login", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ocorreu algum erro ao realizar a requisição, tente novamente
      static let request_failure = Rswift.StringResource(key: "request_failure", tableName: "Login", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Bem vindo!
      static func welcome(_: Void = ()) -> String {
        return NSLocalizedString("welcome", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Continuar
      static func `continue`(_: Void = ()) -> String {
        return NSLocalizedString("continue", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Digite o seu e-mail para continuar
      static func digit_your_email_to_continue(_: Void = ()) -> String {
        return NSLocalizedString("digit_your_email_to_continue", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: E-mail inválido, insira um e-mail valido para continuar
      static func invalid_email(_: Void = ()) -> String {
        return NSLocalizedString("invalid_email", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ocorreu algum erro ao realizar a requisição, tente novamente
      static func request_failure(_: Void = ()) -> String {
        return NSLocalizedString("request_failure", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController
      
      let breedList = StoryboardViewControllerResource<DogBreedsListViewController>(identifier: "breedList")
      let bundle = R.hostingBundle
      let login = StoryboardViewControllerResource<LoginViewController>(identifier: "login")
      let name = "Main"
      let photoList = StoryboardViewControllerResource<DogPhotoListViewController>(identifier: "photoList")
      
      func breedList(_: Void = ()) -> DogBreedsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: breedList)
      }
      
      func login(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: login)
      }
      
      func photoList(_: Void = ()) -> DogPhotoListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: photoList)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().breedList() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'breedList' could not be loaded from storyboard 'Main' as 'DogBreedsListViewController'.") }
        if _R.storyboard.main().login() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
        if _R.storyboard.main().photoList() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'photoList' could not be loaded from storyboard 'Main' as 'DogPhotoListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
